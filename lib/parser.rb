# Autogenerated from a Treetop grammar. Edits may be lost.


module Rasp
  include Treetop::Runtime

  def root
    @root ||= :program
  end

  def _nt_program
    start_index = index
    if node_cache[:program].has_key?(index)
      cached = node_cache[:program][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_cell
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(Program,input, i0...index, s0)

    node_cache[:program][start_index] = r0

    r0
  end

  module Cell0
  end

  def _nt_cell
    start_index = index
    if node_cache[:cell].has_key?(index)
      cached = node_cache[:cell][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_whitespace
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      i3 = index
      r4 = _nt_quotes
      if r4
        r3 = r4
      else
        r5 = _nt_anonymous_func
        if r5
          r3 = r5
        else
          r6 = _nt_number
          if r6
            r3 = r6
          else
            r7 = _nt_string
            if r7
              r3 = r7
            else
              r8 = _nt_keyword
              if r8
                r3 = r8
              else
                r9 = _nt_symbol
                if r9
                  r3 = r9
                else
                  r10 = _nt_list
                  if r10
                    r3 = r10
                  else
                    r11 = _nt_vector
                    if r11
                      r3 = r11
                    else
                      @index = i3
                      r3 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
      s0 << r3
      if r3
        s12, i12 = [], index
        loop do
          r13 = _nt_whitespace
          if r13
            s12 << r13
          else
            break
          end
        end
        r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
        s0 << r12
      end
    end
    if s0.last
      r0 = instantiate_node(Cell,input, i0...index, s0)
      r0.extend(Cell0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cell][start_index] = r0

    r0
  end

  def _nt_quotes
    start_index = index
    if node_cache[:quotes].has_key?(index)
      cached = node_cache[:quotes][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_quoted_cell
    if r1
      r0 = r1
    else
      r2 = _nt_backquoted_cell
      if r2
        r0 = r2
      else
        r3 = _nt_unquoted_splicing_cell
        if r3
          r0 = r3
        else
          r4 = _nt_unquoted_cell
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:quotes][start_index] = r0

    r0
  end

  module QuotedCell0
    def cell
      elements[1]
    end
  end

  def _nt_quoted_cell
    start_index = index
    if node_cache[:quoted_cell].has_key?(index)
      cached = node_cache[:quoted_cell][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_cell
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(QuotedCell,input, i0...index, s0)
      r0.extend(QuotedCell0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_cell][start_index] = r0

    r0
  end

  module BackquotedCell0
    def cell
      elements[1]
    end
  end

  def _nt_backquoted_cell
    start_index = index
    if node_cache[:backquoted_cell].has_key?(index)
      cached = node_cache[:backquoted_cell][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("`", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("`")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_cell
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(BackquotedCell,input, i0...index, s0)
      r0.extend(BackquotedCell0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:backquoted_cell][start_index] = r0

    r0
  end

  module UnquotedCell0
    def cell
      elements[1]
    end
  end

  def _nt_unquoted_cell
    start_index = index
    if node_cache[:unquoted_cell].has_key?(index)
      cached = node_cache[:unquoted_cell][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("~", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("~")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_cell
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(UnquotedCell,input, i0...index, s0)
      r0.extend(UnquotedCell0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unquoted_cell][start_index] = r0

    r0
  end

  module UnquotedSplicingCell0
    def cell
      elements[1]
    end
  end

  def _nt_unquoted_splicing_cell
    start_index = index
    if node_cache[:unquoted_splicing_cell].has_key?(index)
      cached = node_cache[:unquoted_splicing_cell][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("~@", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("~@")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_cell
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(UnquotedSplicingCell,input, i0...index, s0)
      r0.extend(UnquotedSplicingCell0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unquoted_splicing_cell][start_index] = r0

    r0
  end

  module AnonymousFunc0
    def list
      elements[1]
    end
  end

  def _nt_anonymous_func
    start_index = index
    if node_cache[:anonymous_func].has_key?(index)
      cached = node_cache[:anonymous_func][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("#", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("#")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_list
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(AnonymousFunc,input, i0...index, s0)
      r0.extend(AnonymousFunc0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:anonymous_func][start_index] = r0

    r0
  end

  module Number0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('-', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('-')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        r4 = _nt_digit
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(Number,input, i0...index, s0)
      r0.extend(Number0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module Keyword0
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(':', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        r4 = _nt_special
        if r4
          r3 = r4
        else
          r5 = _nt_letter
          if r5
            r3 = r5
          else
            r6 = _nt_number
            if r6
              r3 = r6
            else
              @index = i3
              r3 = nil
            end
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(Keyword,input, i0...index, s0)
      r0.extend(Keyword0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  module Symbol0
  end

  def _nt_symbol
    start_index = index
    if node_cache[:symbol].has_key?(index)
      cached = node_cache[:symbol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_special
    if r2
      r1 = r2
    else
      r3 = _nt_letter
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        i5 = index
        r6 = _nt_special
        if r6
          r5 = r6
        else
          r7 = _nt_letter
          if r7
            r5 = r7
          else
            r8 = _nt_number
            if r8
              r5 = r8
            else
              @index = i5
              r5 = nil
            end
          end
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(Symbol,input, i0...index, s0)
      r0.extend(Symbol0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:symbol][start_index] = r0

    r0
  end

  module List0
  end

  def _nt_list
    start_index = index
    if node_cache[:list].has_key?(index)
      cached = node_cache[:list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_cell
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(')', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(List,input, i0...index, s0)
      r0.extend(List0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:list][start_index] = r0

    r0
  end

  module Vector0
  end

  def _nt_vector
    start_index = index
    if node_cache[:vector].has_key?(index)
      cached = node_cache[:vector][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_cell
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(']', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(']')
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Vector,input, i0...index, s0)
      r0.extend(Vector0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:vector][start_index] = r0

    r0
  end

  module String0
  end

  def _nt_string
    start_index = index
    if node_cache[:string].has_key?(index)
      cached = node_cache[:string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\\"', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\\"')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?('\G[^"]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r6 = nil
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(String,input, i0...index, s0)
      r0.extend(String0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string][start_index] = r0

    r0
  end

  def _nt_special
    start_index = index
    if node_cache[:special].has_key?(index)
      cached = node_cache[:special][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[#!$%&*/<=>?^_~+.@-]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:special][start_index] = r0

    r0
  end

  def _nt_letter
    start_index = index
    if node_cache[:letter].has_key?(index)
      cached = node_cache[:letter][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:letter][start_index] = r0

    r0
  end

  def _nt_digit
    start_index = index
    if node_cache[:digit].has_key?(index)
      cached = node_cache[:digit][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:digit][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?('\G[,\\t\\n\\v\\f\\r ]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r2 = _nt_comment
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

  module Comment0
  end

  module Comment1
  end

  def _nt_comment
    start_index = index
    if node_cache[:comment].has_key?(index)
      cached = node_cache[:comment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(';', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(';')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("\n", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Comment0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("\n", false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r8 = nil
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment][start_index] = r0

    r0
  end

end

class RaspParser < Treetop::Runtime::CompiledParser
  include Rasp
end

