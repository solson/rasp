(def list (fn (& args) args))

(defn map (f ary)
  (.map ary @ f))

(defn concat (& args)
  (.reduce args [] "+"))

(def defmacro (macro (name args & forms)
		     `(def ~name ~(apply macro args forms))))

(defn reduce (f ary)
  (.reduce ary @ f))

(defmacro import (& classes)
  `(do ~@(map (fn (class)
		  `(def ~class (const-get ~class)))
	      classes)))

;; import Rasp
(import Rasp)

(defn gensym (prefix)
  (.sym Rasp (str (or prefix "G__") (.next_gensym_id Rasp))))

;; import Ruby builtins
(import Kernel Object Module Class Range String Array Hash Regexp)
(import Numeric Integer Fixnum Bignum Float)

(defn require (name)
  (.require Kernel name))

(defmacro comment (& forms))

(defmacro .. (obj form & more)
  (if (.empty? more)
    `(. ~obj ~form)
    `(.. (. ~obj ~form) ~@more)))

(defn range (min max)
  (.new Range min max))

(defmacro loop (& body)
  `(.loop Kernel @ (fn () ~@body)))

(defn str (& args)
  (.join args))

(defn slice (seq start end)
  (.slice seq (range start (or end -1))))

(defn = (& args)
  (.all? args @ #(.== (.first args) %)))

(defn not (x)
  (.!@ x))

(defmacro when (condition & body)
  `(if ~condition (do ~@body) nil))

(defmacro when-not (condition & body)
  `(if ~condition nil (do ~@body)))

(defn print (& args)
  (.print Kernel (.join args " ")))

(defn println (& args)
  (apply print args)
  (print "\n"))

(defn pr (& args)
  (apply print (map #(.inspect %) args)))

(defn prn (& args)
  (apply pr args)
  (print "\n"))

(defn each (f ary)
  (.each ary @ f))

(defn rational (numerator denominator)
  (.Rational Kernel numerator denominator))

(defn complex (real imaginary)
  (.Complex Kernel real imaginary))

(defn + (& args)
  (.reduce args 0 "+"))

(defn * (& args)
  (.reduce args 1 "*"))

(defn - (x & rest)
  (if (.empty? rest)
    (.-@ x)
    (.reduce rest x "-")))

(defn / (x & rest)
  (if (.empty? rest)
    (./ (rational 1 1) x)
    (.reduce rest (if (.is_a? x Float)
		    x
		    (rational x 1))
	     "/")))
